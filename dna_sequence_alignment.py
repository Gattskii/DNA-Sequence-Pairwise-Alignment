# -*- coding: utf-8 -*-
"""DNA Sequence Alignment.ipynb

Automatically generated by Colab.

"""

!pip install biopython

from Bio import Entrez

# NCBI config
Entrez.email = "-@example.com"
Entrez.tool = "python"

# Retrieve gene sequence APOE from NCBI
gene_code = "KY560197.1"
handle = Entrez.efetch(db="nucleotide", id=gene_code, rettype="fasta", retmode="text")
sequence_data = handle.read()
handle.close()

# Nucleotide sequence
sequence = sequence_data.split("\n")[1:]
sequence = "".join(sequence)

print(sequence)

def translate_dna_to_protein(dna_sequence):

    # Input check
    if not all(base in "ACTG" for base in dna_sequence):
        raise ValueError("Invalid DNA sequence: {}".format(dna_sequence))

    # Make dna sequence uppercase, only double check
    dna_sequence = dna_sequence.upper()

    protein_sequence = ""

    # iterate dna sequence in codons
    for i in range(0, len(dna_sequence), 3):
        codon = dna_sequence[i:i+3]

        # translate codon
        amino_acid = genetic_code[codon]

        # amino acid to protein sequence
        protein_sequence += amino_acid

    return protein_sequence


# genetic codon
genetic_code = {
    "AAA": "K", "AAC": "K", "AAG": "K", "AAT": "K",
    "ACA": "T", "ACC": "T", "ACG": "T", "ACT": "T",
    "AGA": "R", "AGC": "R", "AGG": "R", "AGT": "R",
    "ATA": "I", "ATC": "I", "ATT": "I", "ATG": "M",
    "CAA": "Q", "CAC": "Q", "CAG": "Q", "CAT": "Q",
    "CCA": "P", "CCC": "P", "CCG": "P", "CCT": "P",
    "CGA": "R", "CGC": "R", "CGG": "R", "CGT": "R",
    "CTA": "L", "CTC": "L", "CTG": "L", "CTT": "L",
    "GAA": "E", "GAC": "E", "GAG": "E", "GAT": "E",
    "GCA": "A", "GCC": "A", "GCG": "A", "GCT": "A",
    "GGA": "G", "GGC": "G", "GGG": "G", "GGT": "G",
    "GTA": "V", "GTC": "V", "GTG": "V", "GTT": "V",
    "TAC": "Y", "TAT": "Y", "TGA": "*", "TGC": "C",
    "TGG": "W", "TGT": "C", "TCA": "S", "TCC": "S",
    "TCG": "S", "TCT": "S", "TAA": "*", "TAC": "Y",
    "TTC": "F", "TTT": "F", "TGG": "W", "TGT": "C",
}

nucleotide_sequence = "CGAGAAGTTGGAACCCTACACCGGAAATATCAGAGAGTCCACCCAGCAGAAGCTGGGCAGCTTGCAGCAGATCTTCTTGGAGAGTGCCGGGAGTCTCCAAGAGCACTTCAACAGTAAGGCAGAGGAGTTCAAGAAGCA"

# call function
protein_sequence = translate_dna_to_protein(nucleotide_sequence)

# show
print("Protein sequence:", protein_sequence)

print("The first 10 amino acids:", protein_sequence[:10])

if protein_sequence[111:114] == "ARG":
    print("APOE Christchurch mutation detected")
else:
    print("APOE Christchurch mutation not detected")

def analyze_base_composition(dna_sequence):

    if not all(base in "ACTG" for base in dna_sequence):
        raise ValueError("Invalid DNA sequence: {}".format(dna_sequence))

    dna_sequence = dna_sequence.upper()

    base_counts = {"A": 0, "C": 0, "G": 0, "T": 0}

    # count the bases
    for base in dna_sequence:
        base_counts[base] += 1

    return base_counts


nucleotide_sequence = "CGAGAAGTTGGAACCCTACACCGGAAATATCAGAGAGTCCACCCAGCAGAAGCTGGGCAGCTTGCAGCAGATCTTCTTGGAGAGTGCCGGGAGTCTCCAAGAGCACTTCAACAGTAAGGCAGAGGAGTTCAAGAAGCA"

base_counts = analyze_base_composition(nucleotide_sequence)

# sbow
print("Base counts:")
for base, count in base_counts.items():
    print(f"{base}: {count}")

# Calculate base percentages
total_bases = len(nucleotide_sequence)
base_percentages = {base: count / total_bases * 100 for base, count in base_counts.items()}

# Show base percentages
print("Base percentages:")
for base, percentage in base_percentages.items():
    print(f"{base}: {percentage:.2f}%")

def calculate_skewness(base_counts):

    gc_content = (base_counts['G'] + base_counts['C']) / sum(base_counts.values())
    at_content = (base_counts['A'] + base_counts['T']) / sum(base_counts.values())
    return gc_content - at_content

# Skewness analysiss with window 5
window_size = 5
for i in range(0, len(nucleotide_sequence) - window_size + 1):
    window_bases = nucleotide_sequence[i:i+window_size]
    window_counts = analyze_base_composition(window_bases)
    window_skewness = calculate_skewness(window_counts)
    print(f"Skewness at position {i+1}: {window_skewness}")

from Bio import pairwise2

# NCBI config
Entrez.email = "-@example.com"
Entrez.tool = "python"

# Retrieve gene sequence APOE from NCBI
gene_code = "CT010356.1 "
handle = Entrez.efetch(db="nucleotide", id=gene_code, rettype="fasta", retmode="text")
mouse_sequence_data = handle.read()
handle.close()

# Nucleotide sequence
mouse_sequence_data = sequence_data.split("\n")[1:]
mouse_sequence_data = "".join(mouse_sequence_data)
print("mouse_sequence:")
print(mouse_sequence_data)
bonyFish_Sequence_data = "CGAGAAGTTGGAACCCTACACCGGAAATATCAGAGAGTCCACCCAGCAGAAGCTGGGCAGCTTGCAGCAGATCTTCTTGGAGAGTGCCGGGAGTCTCCAAGAGCACTTCAACAGTAAGGCAGAGGAGTTCAAGAAGCA"

# global alignment
alignment = pairwise2.align.globalms(bonyFish_Sequence_data, mouse_sequence_data, 2, -1, -5, -2)

aligned_bony_fish = alignment[0]
aligned_mouse = alignment[1]
score = alignment[2]

# show alignments
print("\nBony Fish Sequence:")
print(aligned_bony_fish)
print("\nMouse Sequence:")
print(aligned_mouse)
print("\nAlignment score:", score)